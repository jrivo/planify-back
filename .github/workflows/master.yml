name: Docker Image CI

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install packages
        run: yarn

      - name: "Caching"
        uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Run tests
        run: yarn test

  deploy:
    needs: test
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v3

      # - name: release-it
      #   uses: TheRealWaldo/release-it@v0.7.2
      #   with:
      #     json-opts: '{"npm": false}'
      #   id: release-it

      - name: "Get last tag"
        run: git describe --tags --abbrev=0
        id: get_last_tag

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/planify-back:${{ steps.get_last_tag.outputs.stdout }}

      - name: Extract branch name
        run: echo "::set-output name=branch::${GITHUB_REF#refs/heads/}"
        id: extract_branch

      - name: Run playbook
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: playbook.yml
          directory: ./.ansible
          key: ${{secrets.SSH_PRIVATE_KEY}}
          inventory: |
            [dev_server]
            ${{secrets.DEV_URL}}

            [dev_server:vars]
            DATABASE_URL=${{secrets.DATABASE_URL}}
            CDN_URL=${{secrets.CDN_URL}}
            CDN_STORAGE_ZONE=${{secrets.CDN_STORAGE_ZONE}}
            CDN_STORAGE_PATH=${{secrets.CDN_STORAGE_PATH}}
            CDN_ACCESS_KEY=${{secrets.CDN_ACCESS_KEY}}
            BRANCH=${{ steps.extract_branch.outputs.branch }}
            NEW_VERSION=${{ steps.get_last_tag.outputs.stdout }}

          options: |
            --inventory .hosts
            --verbose
