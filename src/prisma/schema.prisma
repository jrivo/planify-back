// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  binaryTargets   = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int            @id @default(autoincrement())
  email          String         @unique
  password       String
  firstName      String?
  lastName       String?
  phone          String?
  address        Address        @relation(fields: [addressId], references: [id])
  profilePicture Media?
  role           Role           @default(USER)
  reviews        Review[]
  status         UserStatus     @default(UNVERIFIED)
  places         Place[]
  userStatusId   Int?
  notifications  Notification[]
  trips          Trip[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?
  addressId      Int
}

enum Role {
  ADMIN
  USER
  MODERATOR
  MERCHANT
  DELETED
}

enum UserStatus {
  UNVERIFIED
  VERIFIED
  INACTIVE
  BANNED
}

model Review {
  id             Int          @id @default(autoincrement())
  author         User         @relation(fields: [userId], references: [id])
  place          Place        @relation(fields: [placeId], references: [id])
  rating         Int
  description    String?
  medias         Media[]
  status         ReviewStatus @relation(fields: [reviewStatusId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  userId         Int
  placeId        Int
  reviewStatusId Int
}

model ReviewStatus {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Review    Review[]
}

// model Message {
//   id         String   @id @default(uuid())
//   author    User    @relation(name:"author",fields: [authorId], references: [id])
//   authorId     String
//   receiver   User    @relation(name:"receiver",fields: [receiverId], references: [id])
//   receiverId String
//   content    String
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
// }

enum MediaType {
  MAIN_IMAGE
  IMAGE
  DOCUMENT
  PROFILE_PICTURE
}

model Media {
  id         Int        @id @default(autoincrement())
  url        String
  type       MediaType?
  name       String
  user       User?      @relation(fields: [userId], references: [id])
  userId     Int?       @unique
  place      Place?     @relation(fields: [placeId], references: [id])
  placeId    Int?
  activity   Activity?  @relation(fields: [activityId], references: [id])
  activityId Int?
  review     Review?    @relation(fields: [reviewId], references: [id])
  reviewId   Int?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Place {
  id          Int        @id @default(autoincrement())
  name        String
  owner       User       @relation(fields: [ownerId], references: [id])
  type        PlaceType? @relation(fields: [placeTypeId], references: [id])
  description String?
  address     Address    @relation(fields: [addressId], references: [id])
  medias      Media[]
  website     String?
  phone       String?
  email       String?
  activities  Activity[]
  Review      Review[]
  placeTypeId Int?
  ownerId     Int
  addressId   Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Address {
  id           Int      @id @default(autoincrement())
  street       String
  streetNumber String
  city         String
  postalCode   String
  country      String
  region       String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  places       Place[]
  users        User[]
}

model PlaceType {
  id        Int      @id @default(autoincrement())
  name      String
  filters   String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Place     Place[]
}

model Activity {
  id          Int       @id @default(autoincrement())
  name        String
  place       Place     @relation(fields: [placeId], references: [id])
  medias      Media[]
  description String
  date        DateTime?
  trips       Trip[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  placeId     Int
  price       Int?
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Trip {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  activities  Activity[]
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}
